"use strict";(self.webpackChunkapp_std=self.webpackChunkapp_std||[]).push([[540],{9540:(O,m,o)=>{o.r(m),o.d(m,{StoreVmBeforeSignalsComponent:()=>Z});var r=o(9334),b=o(7562),e=o(5002),l=o(1769),d=o(4137),u=o(41),p=o(7602),c=o(1792);function f(t,a){if(1&t){const n=e.EpF();e.ynx(0),e.TgZ(1,"pg-beer-list",1),e.NdJ("changePage",function(i){e.CHM(n);const g=e.oxw();return e.KtG(g.changePage(i))}),e.qZA(),e.BQk()}if(2&t){const n=a.ngIf;e.xp6(1),e.Q6J("beers",n.beers)("pagination",n.pagination)("loading",n.requestStatus.loading)}}let v=(()=>{class t{constructor(){this.beerFacadeService=(0,e.f3M)(c.f),this.vm$=(0,l.a)([this.beerFacadeService.beers$,this.beerFacadeService.pagination$,this.beerFacadeService.requestStatus$]).pipe((0,u.U)(([n,s,i])=>({beers:n,pagination:s,requestStatus:i})),(0,d.b)(console.log))}ngOnInit(){this.beerFacadeService.loadBeers()}changePage(n){this.beerFacadeService.changePage(n.pageIndex)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["pg-vm-combined-observables"]],standalone:!0,features:[e._Bn([c.f]),e.jDz],decls:2,vars:3,consts:[[4,"ngIf"],[3,"beers","pagination","loading","changePage"]],template:function(n,s){1&n&&(e.YNc(0,f,2,3,"ng-container",0),e.ALo(1,"async")),2&n&&e.Q6J("ngIf",e.lcZ(1,1,s.vm$))},dependencies:[r.ez,r.O5,r.Ov,p.S],styles:["[_nghost-%COMP%]{--mat-table-row-item-container-height: 100px}"],changeDetection:0}),t})();function h(t,a){if(1&t){const n=e.EpF();e.TgZ(0,"pg-beer-list",2),e.NdJ("changePage",function(i){e.CHM(n);const g=e.oxw(2);return e.KtG(g.changePage(i))}),e.qZA()}if(2&t){const n=e.oxw().ngIf;e.Q6J("beers",n.beers)("pagination",n.pagination)("loading",n.requestStatus.loading)}}function S(t,a){if(1&t&&(e.ynx(0),e.YNc(1,h,1,3,"pg-beer-list",1),e.BQk()),2&t){const n=a.ngIf;e.xp6(1),e.Q6J("ngIf",n.beers&&n.pagination&&n.requestStatus)}}const C=function(t,a,n){return{beers:t,pagination:a,requestStatus:n}};let _=(()=>{class t{constructor(){this.beerFacadeService=(0,e.f3M)(c.f)}ngOnInit(){this.beerFacadeService.loadBeers()}changePage(n){this.beerFacadeService.changePage(n.pageIndex)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["pg-vm-separated-observables"]],standalone:!0,features:[e._Bn([c.f]),e.jDz],decls:4,vars:11,consts:[[4,"ngIf"],[3,"beers","pagination","loading","changePage",4,"ngIf"],[3,"beers","pagination","loading","changePage"]],template:function(n,s){1&n&&(e.YNc(0,S,2,1,"ng-container",0),e.ALo(1,"async"),e.ALo(2,"async"),e.ALo(3,"async")),2&n&&e.Q6J("ngIf",e.kEZ(7,C,e.lcZ(1,1,s.beerFacadeService.beers$),e.lcZ(2,3,s.beerFacadeService.pagination$),e.lcZ(3,5,s.beerFacadeService.requestStatus$)))},dependencies:[r.ez,r.O5,r.Ov,p.S],changeDetection:0}),t})(),Z=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["pg-store-vm-combined-observables"]],standalone:!0,features:[e._Bn([b.x]),e.jDz],decls:19,vars:0,consts:[[1,"mt-2","mb-4"],[1,"font-semibold"],[1,"text-sm"],[1,"mt-2","block","font-bold"],[1,"grid","grid-cols-2","gap-10"]],template:function(n,s){1&n&&(e.TgZ(0,"header",0)(1,"h1",1),e._uU(2,"VMs from store"),e.qZA(),e.TgZ(3,"div",2)(4,"p"),e._uU(5," Comparison between combined or separated subscriptions for sources. This is an effort to have less subscriptions and unmanaged (async pipe). "),e.qZA(),e.TgZ(6,"label",3),e._uU(7,"Notes:"),e.qZA(),e.TgZ(8,"p"),e._uU(9," The combined subscription fires a change "),e.TgZ(10,"b"),e._uU(11,"every time"),e.qZA(),e._uU(12," one of his sources is changed. In this playground is not a problem because our sources are from ngrx store (or component-store) and they are memoized. But if the sources are not memoized for the components inputs "),e.TgZ(13,"b"),e._uU(14,"could be a performance mess!"),e.qZA(),e._uU(15,". Use it if you completely understand change detection and observable, if not is not worth it. "),e.qZA()()(),e.TgZ(16,"main",4),e._UZ(17,"pg-vm-combined-observables")(18,"pg-vm-separated-observables"),e.qZA())},dependencies:[r.ez,v,_],changeDetection:0}),t})()}}]);